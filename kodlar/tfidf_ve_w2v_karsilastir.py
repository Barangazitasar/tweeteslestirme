import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from gensim.models import Word2Vec
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer

# Veriyi yÃ¼kle
df = pd.read_csv("temizlenmis_tweetler_stop.csv")
tweets = df["TemizTweet_Stop"].fillna("").tolist()

# --- TF-IDF vektÃ¶rleri oluÅŸtur ---
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrix = tfidf_vectorizer.fit_transform(tweets)

# --- Word2Vec modelini yÃ¼kle ---
model = Word2Vec.load("word2vec_model.model")

# Tweet baÅŸÄ±na ortalama Word2Vec vektÃ¶rÃ¼ hesapla
def ortalama_vektor(tweet, model):
    kelimeler = tweet.split()
    vektorler = [model.wv[k] for k in kelimeler if k in model.wv]
    if vektorler:
        return np.mean(vektorler, axis=0)
    else:
        return np.zeros(model.vector_size)

w2v_vektorler = np.array([ortalama_vektor(tw, model) for tw in tweets])

# --- Ã–rnek bir tweet seÃ§ ---
secilen_index = 0
print("ðŸ”´ TF-IDF & Word2Vec karÅŸÄ±laÅŸtÄ±rmasÄ±")
print("ðŸ”¸ SeÃ§ilen tweet:", tweets[secilen_index])

# --- TF-IDF benzerlikleri ---
tfidf_scores = cosine_similarity(tfidf_matrix[secilen_index], tfidf_matrix)[0]
tfidf_indices = tfidf_scores.argsort()[-6:-1][::-1]  # En benzer 5 (ilk tweet hariÃ§)

# --- Word2Vec benzerlikleri ---
w2v_scores = cosine_similarity([w2v_vektorler[secilen_index]], w2v_vektorler)[0]
w2v_indices = w2v_scores.argsort()[-6:-1][::-1]

# --- SonuÃ§larÄ± yazdÄ±r ---
print("\nðŸ“Œ TF-IDF ile en benzer tweetler:")
for i in tfidf_indices:
    print("-", tweets[i])

print("\nðŸ“Œ Word2Vec ile en benzer tweetler:")
for i in w2v_indices:
    print("-", tweets[i])
